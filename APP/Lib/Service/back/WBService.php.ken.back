<?php
import("XMLUtil","think.Util.XMLUtil");
require_once(LIB_PATH.'\Utils\nusoap\nusoap.php');
class WBService 
{
	/**
	 * 日志
	 *
	 * @var string
	 */
	private $log;
	
	/**
	 * 公司编号
	 *
	 * @var string
	 */
	private $company;
	
	/**
	 * soap client
	 *
	 * @var nusoap_client
	 */
	private $client;
	
	/**
	 * 建立nusoap client
	 *
	 */
	private function create($header='US000000000')
	{
		if(!$this->client)
		{
			$this->client = new nusoap_client("http://59.42.10.25:8001/Admin/WebServices/Organ_Interface.asmx?WSDL", true);
			$this->client->soap_defencoding = 'utf-8';  
			$this->client->decode_utf8 = false;
			
			$header = "<SecurityHeader xmlns=\"http://tempuri.org/\"><UserId>US000000000</UserId></SecurityHeader>";
			$this->client->setHeaders($header);
		}
	}
		
	/**
	 * request
	 * 01 查询单据轨迹 02 保存定单 03回写单据号 04 更改单据状态 
	 * @param string $data
	 * @return string 0 记录不存在 1 成功 -1 失败 -2 用户/密码错误 -3 无效机构号 -9 其他错误
	 */
	public function request($data)
	{
		try {			
			$xml = simplexml_load_string($data); 
			$request = XMLUtil::XML2array($xml);

			$this->addLog(print_r($data,true));
	
			//检查用户/密码是否正确
			if(!$this->check($request["head"],$result))
				return $result;
			
			//开始请求处理		
			switch ($request["head"]["type"])
			{
				case '01':
					$result = $this->track($request);
					break;
				case '02':
					$result = $this->order($request);
					break;
				case '03':
					$result = $this->updatebillno($request);
					break;
				case '04':
					$result = $this->updatestatus($request);
					break;
				default:
					$result = $this->createResult('-9');
			}
		}catch (Exception $e)
		{
			$this->addLog("Not exception error from query:".$e->getMessage());
			$result = $this->createResult($request["head"]["type"]);
		}
		
		return $result;
	}
	
	/**
	 * 检查用户密码是否正确
	 * 检查是否存在此机构号
	 *
	 * @param string $head
	 * @return boolean
	 */
	private function check($head,&$result)
	{
		try
		{
			//检查用户/密码
			if($head["user"] != "webbusiness" & $head["pass"] != "web4321")
			{
				$result = $this->createResult($head["type"],-2);
				return false;
			}
			
			//检查是否有此机构号
			if(!trim($head["organid"]))
			{
				$result = $this->createResult($head["type"],-3);
				return false;
			}
			
			$model = new DeptModel();
			$rs= $model->find("organid = '".$head["organid"]."' and type = 'organ'");
			if(!$rs)
			{
				$result = $this->createResult($head["type"],-3);
				return false;
			}
			else 
			{
				$this->company = $rs["DeptNo"];
			}
			
			return true;
		}
		catch (Exception $e)
		{
			$this->addLog("NotException error from checkUser:".$e->getMessage());
			$result = $this->createResult($head["type"]);
		
			return false;
		}
	}
	
	/**
	 * 01 查询货物轨迹
	 *
	 */
	private function track($request)
	{
		try {
			$dno = $request["body"]["BillNo"];
			$dno = ereg_replace("[^a-zA-Z0-9,-]",'',$dno);
			$dno = str_replace(',',"','",$dno);
			$dno = "'".$dno."'";
			
			$condition = " ( dno in (".$dno.") ) and ( AirWayBill.DBilldate > DATEADD(month,-3,getdate()) ) and ( deptno like '".$this->company."%' ) ";
			
			$model = new AirWayBillModel();
			$result = $model->findAll($condition);
			if($result)
			{
				$item .= "<items>";
				for($i=0;$i<count($result);$i++)
				{
					$item .= "<item>";
					$item .= "<BillNo>".$result[$i]["DNO"]."</BillNo>";
					$item .= "<Billdate>".$result[$i]["DBilldate"]."</Billdate>";
					$item .= "<Departure>".$result[$i]["Departure"]."</Departure>";
					$item .= "<Destination>".$result[$i]["Destination"]."</Destination>";
					$item .= "<Qty>".$result[$i]["Qty"]."</Qty>";
					$item .= "<Weight>".$result[$i]["Weight"]."</Weight>";
					$item .= "<SignIn>".$result[$i]["SignIn"]."</SignIn>";
					$item .= "<SignDate>".$result[$i]["SignDate"]."</SignDate>";
					$item .= "<TraceRecord>".$result[$i]["Memo"]."</TraceRecord>";
					$item .= "</item>";
				}
				$item .= "</items>";
				return $this->createResult($request["head"]["type"],1,'',count($result),$item);
			}
			else 
			{
				return $this->createResult($request["head"]["type"],1,'',0);
			}
		}
		catch (Exception $e)
		{
			$this->addLog("NotException error from send:".$e->getMessage());
			$result = $this->createResult($request["head"]["type"],'-9');
			return $result;
		}
	}
	
	/**
	 * 下订单
	 *
	 * @param string $request
	 */
	private function order($request)
	{
		$paytype = array("现金","月结","到付");
		$transtype = array("空运","汽运");
		$deliverType = array("市内自提","机场自提","送货上门");
		$signbacktype = array("","随货签收单原件返回","随货签收单传真返回","网络公司签收单传真返回");
		
		try {
			$data["OrderInfoId"] = $request["body"]["OrderInfoId"];
			$data["billDate"] = $request["body"]["BillDate"];
			$data["userId"] = $request["body"]["UserId"];
			$data["userName"] = $request["body"]["UserId"];
			$data["departure"] = $request["body"]["Departure"];
			$data["clientName"] = $request["body"]["Shipper"];
			$data["clientPhone"] = $request["body"]["ShipperPhone"];
			$data["clientMobile"] = $request["body"]["ShipperMobile"];
			$data["clientAddress"] = $request["body"]["ShipperAddress"];
			$data["destination"] = $request["body"]["Destination"];
			$data["consignee"] = $request["body"]["Recipients"];
			$data["consigneePhone"] = $request["body"]["RecipientsPhone"];
			$data["consigneeMobile"] = $request["body"]["RecipientsMobile"];
			$data["consigneeAddress"] = $request["body"]["RecipientsAddress"];
			$data["goods"] = $request["body"]["GoodsName"];
			$data["qty"] = intval($request["body"]["Qty"]);
			$data["weight"] = doubleval($request["body"]["Weight"]);
			$data["cubage"] = doubleval($request["body"]["Volume"]);
			$data["package"] = $request["body"]["Package"];
			$data["payType"] = $paytype[$request["body"]["Payment"]];
			$data["insuranceValue"] = doubleval($request["body"]["InsuranceValue"]);
			$data["getMoney"] = doubleval($request["body"]["Chargeforgoods"]);
			$data["transtype"] = $transtype[$request["body"]["Transporttype"]];
			$data["deliverType"] = $deliverType[$request["body"]["Pickup"]];
			$data["signBackType"] = $signbacktype[$request["body"]["BillReceiptReturn"]];
			$data["receipt"] = intval($request["body"]["InceptAtDoor"]);
			$data["receiptPhone"] = $request["body"]["InceptTelephone"];
			$data["receiptAddress"] = $request["body"]["LoadingLocation"];
			$data["receiptTime"] = $request["body"]["InceptTime"];
			$data["notice"] = $request["body"]["Information"];
			$data["company"] = $this->company;
			
			$model = new Web_OrderModel();
			$result = $model->add($data);
			if(!$result)
				return $this->createResult($request["head"]["type"]);
			else
				return $this->createResult($request["head"]["type"],'1','','1');
		}
		catch (Exception $e)
		{
			$this->addLog("NotException error from send:".$e->getMessage());
			$result = $this->createResult($request["head"]["type"],'-9');
			return $result;
		}
	}
	
	/**
	 * 回写正是代单号
	 *
	 * @param string $request
	 */
	private function updatebillno($request)
	{
		
		return $this->createResult($request["head"]["type"],-9,'not finish');
	}
	
	/**
	 * 回写单据状态
	 *
	 * @param string $request
	 */
	private function updatestatus($request)
	{
		
		return $this->createResult($request["head"]["type"],-9,'not finish');
	}
	
	/**
	 * 建立错误返回xml
	 *
	 * @param string $code
	 */
	private function createResult($requestcode,$resultcode='-1',$info='',$row='0',$body='')
	{
		$result = "<?xml version='1.0' encoding='utf-8'?>
					<result><head>
						<type>$requestcode</type>
						<code>$resultcode</code>
						<rowcount>$row</rowcount>
						<info>$info</info>
					</head>$body</result>";
		
		$this->addLog("result:".$result);
		
		return $result;
	}
	
	private function escape_string($str)
	{
		$str = str_replace("'","''",$str);
    	$str = str_replace("&quot;", '"', $str);
        $str = str_replace("&lt;", "<", $str);
        $str = str_replace("&gt;", ">", $str);
        $str = str_replace("&amp;", "&", $str);
        return $str;
	}
	
	/**
	 * 记录日志
	 *
	 * @param string $data
	 */
	private function addLog($data)
	{
		Log::record($data,WEB_LOG_DEBUG);
		return ;
	}
	
	/**
	 * 写日志文件
	 *
	 */
	function __destruct()
	{
		Log::save();
	}
	
}
?>